// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dist bundle action.d.ts is unchanged 1`] = `
"/**
 * SimpleRedux Actions
 * string enum of the defined actions that is used as type enforcement for Reducer and Sagas arguments
 */
export declare enum SIMPLEREDUX {
    MERGE = \\"SIMPLEREDUX_MERGE\\",
    FAILURE = \\"SIMPLEREDUX_FAILURE\\",
    HTTP_DELETE = \\"SIMPLEREDUX_HTTP_DELETE\\",
    HTTP_GET = \\"SIMPLEREDUX_HTTP_GET\\",
    HTTP_HEAD = \\"SIMPLEREDUX_HTTP_HEAD\\",
    HTTP_PATCH = \\"SIMPLEREDUX_HTTP_PATCH\\",
    HTTP_POST = \\"SIMPLEREDUX_HTTP_POST\\",
    HTTP_PUT = \\"SIMPLEREDUX_HTTP_PUT\\"
}
"
`;

exports[`Dist bundle dispatch.d.ts is unchanged 1`] = `
"import { AxiosResponse, AxiosRequestConfig } from \\"axios\\";
import { SIMPLEREDUX } from \\"./action\\";
import { IAction, IDefaultState } from \\"./utilities\\";
/**
 * Configurable options for each Dispatch function
 * @param failureSaga: optional saga to run after the handled failure action to yield more actions
 * @param mergeSaga: optional saga to run after the handled merge action to yield more actions
 * @param requestConfig: [AxiosRequestConfig] to configure the Axios request
 */
export interface IDispatchOptions {
    failureSaga?: (action: IAction<SIMPLEREDUX, ISimpleReduxPayload>) => void;
    mergeSaga?: (action: IAction<SIMPLEREDUX, ISimpleReduxPayload>) => void;
    requestConfig?: AxiosRequestConfig;
}
interface IDispatchDefault {
    data: any;
    error: any;
    options?: IDispatchOptions;
}
export declare const dispatchDefault: IDispatchDefault;
export interface ISimpleCachePayloadTag extends IDefaultState {
    oldToggle?: string | boolean;
    tag: string;
    valueAsString?: string;
    valueAsNumber?: number;
}
export interface ISimpleHttpPayloadTag extends IDefaultState, AxiosResponse {
    options?: IDispatchOptions;
    tag: string;
    url: string;
}
export declare type ISimpleReduxPayloadTag = ISimpleCachePayloadTag | ISimpleHttpPayloadTag;
export interface ISimpleReduxPayload {
    [tag: string]: ISimpleReduxPayloadTag;
}
export interface IDispatchSimpleRedux {
    /**
     * Dispatch state merge action, overwrites state for a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param data new data that overwrites fields in state[tag]
     */
    simpleMerge: (tag: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.MERGE, ISimpleReduxPayload>;
    /**
     * Dispatch state merge action, overwrites entire state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param data new data that overwrites any fields in state
     */
    simpleMergeRaw: (data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.MERGE, any>;
    /**
     * Dispatch state merge action, overwrites state for a specific tag
     * @param tag string to identify domain of state
     * @param data new data that overwrites fields in state[tag].data
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     */
    simpleMergeData: (tag: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.MERGE, ISimpleReduxPayload>;
    /**
     * Dispatch state merge action, overwrites state for a specific tag
     * @param tag string to identify domain of state
     * @param oldState old SimpleRedux state, in order to lookup current value of tag
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     */
    simpleMergeToggle: (tag: string, oldState: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.MERGE, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Delete action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     */
    simpleHttpDelete: (tag: string, url: string, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_DELETE, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Get action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param url HTTP endpoint to make the request
     */
    simpleHttpGet: (tag: string, url: string, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_GET, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Head action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param url HTTP endpoint to make the request
     */
    simpleHttpHead: (tag: string, url: string, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_HEAD, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Patch action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param url HTTP endpoint to make the request
     * @param data data to include in request body
     */
    simpleHttpPatch: (tag: string, url: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_PATCH, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Post action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param url HTTP endpoint to make the request
     * @param data data to include in request body
     */
    simpleHttpPost: (tag: string, url: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_POST, ISimpleReduxPayload>;
    /**
     * Dispatch HTTP Put action, returns response/failure to a specific tag
     * @param tag string to identify domain of state
     * @param options configure the dispatch with optional failureSaga, mergeSaga, or requestConfig
     * @param url HTTP endpoint to make the request
     * @param data data to include in request body
     */
    simpleHttpPut: (tag: string, url: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.HTTP_PUT, ISimpleReduxPayload>;
}
interface IPrivateDispatchSimpleRedux extends IDispatchSimpleRedux {
    /**
     * Dispatch failure action, usually for error encountered in Redux saga
     * @param tag string to identify domain of state
     * @param error object with error fields
     */
    simpleFailure: (tag: string, error: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.FAILURE, ISimpleReduxPayload>;
}
/**
 * SimpleRedux Dispatch Object
 * * Comprised of functions that dispatch Actions with standard defaults and any required passed in input
 * * dispatchSimpleRedux Object is used in any Redux connected component to initiate Redux Saga provided functionality
 */
export declare const dispatchSimpleRedux: IDispatchSimpleRedux;
export declare const privateDispatchSimpleRedux: IPrivateDispatchSimpleRedux;
export {};
"
`;

exports[`Dist bundle reducer.d.ts is unchanged 1`] = `
"import { SIMPLEREDUX } from \\"./action\\";
import { ISimpleReduxPayload } from \\"./dispatch\\";
import { IAction, IRootState } from \\"./utilities\\";
/**
 * Merges dispatched action objects on to the existing (or initial) state to generate new state
 */
export declare function SimpleReduxReducer(state: any, action: IAction<SIMPLEREDUX, {}>): any;
/**
 * Interface for the SimpleRedux state that is stored in Redux wrapped in an ImmutableJS object
 */
export interface ISimpleReduxState extends IRootState {
    [tag: string]: any | ISimpleReduxPayload;
}
/**
 * Interface for a SimpleRedux state wrapped in an ImmutableJS object, as it is in Redux
 */
export interface ISimpleReduxImmutableState {
    toJS: () => ISimpleReduxState;
}
"
`;

exports[`Dist bundle saga.d.ts is unchanged 1`] = `
"import { SimpleReduxSaga } from \\"./utilities\\";
/** Root Saga for SimpleRedux */
export declare function watchSimpleReduxSagas(): SimpleReduxSaga;
"
`;

exports[`Dist bundle utilities/handler.d.ts is unchanged 1`] = `
"import { IDispatchOptions, IDispatchSimpleRedux } from \\"../dispatch\\";
import { ISimpleReduxState } from \\"../reducer\\";
/**
 * Handler functions to make provide event handlers for components in props
 *
 * <InputGroup onChange={handler.simpleMergeData(\\"my-tag\\", options)} />
 *
 * Note:
 * - Options and ...options.overrideArgs values are optional
 * - Data will get implicitly passed in by extracting out parseEventInput(...onChangeArgs) from
 *   the component
 */
/**
 * IHandlerOptions extends IDispatchOptions by adding an overrideArgs field that,
 * if present, is used instead of the onChange event provided args
 */
export interface IHandlerOptions extends IDispatchOptions {
    overrideArgs?: any;
}
/** Don't persist raw React events thinking they are deliberate objects */
export declare const isSyntheticEvent: (obj: any) => boolean;
/**
 * Provides normalized handling of component onChange varied inputs
 * @param args array of any event input from a component onChange function
 */
export declare const parseOnChangeArgs: (args: any) => any;
export interface IHandler {
    /**
     * Handle onClick or onChange event to dispatch state merge action, overwrites state for a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleMerge
     * @param tag string to identify domain of state
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args
     */
    simpleMerge: (connectedProps: IDispatchSimpleRedux, tag: string, options?: IHandlerOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch state merge action, overwrites entire state
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleMergeRaw
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args
     */
    simpleMergeRaw: (connectedProps: IDispatchSimpleRedux, options?: IHandlerOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch state merge action, overwrites state for a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleMergeData
     * @param tag string to identify domain of state
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args
     */
    simpleMergeData: (connectedProps: IDispatchSimpleRedux, tag: string, options?: IHandlerOptions) => (...onChangeArgs: any[]) => void;
    /**
     * Handle onClick or onChange event to dispatch state merge action, overwrites state for a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleMergeToggle and simpleRedux state
     * @param tag string to identify domain of state
     * @param oldState old SimpleRedux state, in order to lookup current value of tag
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     */
    simpleMergeToggle: (connectedProps: IDispatchSimpleRedux & {
        simpleRedux: ISimpleReduxState;
    }, tag: string, options?: IDispatchOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Delete action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpDelete
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     */
    simpleHttpDelete: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IDispatchOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Get action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpGet
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     */
    simpleHttpGet: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IDispatchOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Head action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpHead
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     */
    simpleHttpHead: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IDispatchOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Patch action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpPatch
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args to be sent as request body
     */
    simpleHttpPatch: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IHandlerOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Post action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpPost
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args to be sent as request body
     */
    simpleHttpPost: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IHandlerOptions) => (...onChangeArgs: any) => void;
    /**
     * Handle onClick or onChange event to dispatch HTTP Put action, returns response/failure to a specific tag
     * @param connectedProps Redux connected props that contain dispatchSimpleRedux.simpleHttpPut
     * @param tag string to identify domain of state
     * @param url HTTP endpoint to make the request
     * @param options? configure the dispatch with optional mergeSaga or requestConfig
     * @param overrideArgs? vararg to override any component onChange args to be sent as request body
     */
    simpleHttpPut: (connectedProps: IDispatchSimpleRedux, tag: string, url: string, options?: IHandlerOptions) => (...onChangeArgs: any) => void;
}
export declare const handler: IHandler;
"
`;

exports[`Dist bundle utilities/index.d.ts is unchanged 1`] = `
"import { History, Location } from \\"history\\";
import { match } from \\"react-router\\";
import { ForkEffectDescriptor, SimpleEffect } from \\"redux-saga/effects\\";
export * from \\"./handler\\";
export * from \\"./mergeSaga\\";
export * from \\"./simpleSelector\\";
/**
 * redux-sagas types copied manually in since they are not yet exported
 * @todo remove once https://github.com/redux-saga/redux-saga/pull/1890 is merged
 */
export interface CombinatorEffect<T, E> {
    \\"@@redux-saga/IO\\": true;
    combinator: true;
    type: T;
    payload: CombinatorEffectDescriptor<E>;
}
export declare type CombinatorEffectDescriptor<E> = {
    [key: string]: E;
} | E[];
/** Type definition for SimpleRedux root Saga: [watchSimpleReduxSagas] */
export declare type SimpleReduxSaga = IterableIterator<CombinatorEffect<\\"ALL\\", SimpleEffect<\\"FORK\\", ForkEffectDescriptor>>>;
/**
 * Default React Router Props
 * These are injected in different conditions depending on if a component is
 * rendered as part of a React Router route
 * https://reacttraining.com/react-router/web/api/location
 */
export interface IRouterProvidedProps {
    history?: History;
    location?: Location;
    match?: match;
}
/** Default State with Redux flow metadata */
export interface IDefaultState {
    data: any;
    error: any;
    loading: boolean;
    success: boolean;
}
/** simpleTag key included in SimpleRedux state to identify that it is compatible with @misk/simpleredux */
export interface IRootState {
    simpleTag: string;
}
/** Default root state that includes Redux flow metadata and simpleTag */
export interface IDefaultRootState extends IDefaultState, IRootState {
}
/** Initializes new default state with initial Redux metadata in an ImmutableJS object */
export declare const defaultState: any;
/**
 * @param simpleTag string identifier for the state domain
 * Used to initialize a top level domain of Redux state
 *
 * Example
 * - Domain: simpleForm
 * - Access: this.state.simpleForm
 * - simpleTag: \\"simpleForm\\"
 * - Initialize: defaultRootState(\\"simpleForm\\")
 */
export declare const defaultRootState: (simpleTag: string) => any;
/** Interface for read only Redux Action */
export interface IAction<T, P> {
    readonly type: T;
    readonly payload?: P;
}
/** Creates Redux Action enforcing type [T] for Action type, and [P] for Action Payload type */
export declare function createAction<T extends string, P>(type: T, payload: P): IAction<T, P>;
/** Generates message given a potentially null error object */
export declare const errorMessage: (error: any) => any;
/**
 * Utilities
 */
/**
 * @param oldState input from the event.target.value of a button (string) or the oldState from Redux store (boolean)
 */
export declare const booleanToggle: (oldState: string | boolean) => boolean;
/**
 * @param payload \`action.payload\` from Redux
 * Assumes that the first non-order safe key accessed is the data
 * Only use when action.payload has a single key (ie. the tag with all metadata inside)
 * Otherwise, unpredictable key selection
 */
export declare const getFirstTag: <T = {
    [key: string]: any;
}, UNIONED_TYPE = {
    [key: string]: any;
}>(payload: {
    [key: string]: UNIONED_TYPE;
}) => T;
/**
 * @param json possibly JSON input as a string
 * @returns JSON or string if JSON.parse fails
 */
export declare const jsonOrString: (json: string) => any;
/** Lookup of HTTP Dispatch method */
export declare const HTTPMethodDispatch: any;
"
`;

exports[`Dist bundle utilities/mergeSaga.d.ts is unchanged 1`] = `
"import { SIMPLEREDUX } from \\"../action\\";
import { IDispatchOptions, ISimpleReduxPayload } from \\"../dispatch\\";
import { IAction } from \\"../utilities\\";
/**
 * Factories for IDispatchOptions optional mergeSaga
 */
/**
 * Loops over data from payload path and saves to tag in Redux
 *
 * @param connectedProps: Redux connected props with dispatchSimpleRedux.simpleMergeData
 * @param payloadPath: path inside of incoming Redux action payload to
 * look to start iterating over payload keys that will be expanded to
 * separate Redux tags
 *
 * Example
 * \`\`\`ts
 * const action = {
 *   payload: {
 *     AlphaTag: {
 *       data: {
 *          delta: [1,2,3],
 *          echo: [4,5,6]
 *       }
 *     }
 *   }
 * }
 * \`\`\`
 *
 * Note that the initial calling tag will have been \\"AlphaTag\\" but to keep
 * sagas generic, we use \`getFirstTag\` to pull the tagged object out of
 * payload.
 *
 * Thus for this example, the \`payloadPath\` is just \\"data\\".
 *
 * @param keyTagLookup: object that maps from action payload keys to the new Redux tags
 * @param options configure the dispatch with optional mergeSaga or requestConfig
 */
export declare const mergeSagaMapKeysToTags: (connectedProps: {
    simpleMergeData: (tag: string, data: any, options?: IDispatchOptions) => IAction<SIMPLEREDUX.MERGE, ISimpleReduxPayload>;
}, payloadPath: string | string[], keyTagLookup: {
    [key: string]: string;
}, options?: IDispatchOptions) => (action: IAction<SIMPLEREDUX, ISimpleReduxPayload>) => IterableIterator<IAction<SIMPLEREDUX.MERGE, ISimpleReduxPayload>>;
"
`;

exports[`Dist bundle utilities/simpleSelector.d.ts is unchanged 1`] = `
"import { Map } from \\"immutable\\";
import { ParametricSelector } from \\"reselect\\";
import { IRootState } from \\"../utilities\\";
/**
 * simpleRootRawSelector is a Redux selector of a subState based on a domain string
 * @param domain
 * @param state
 *
 * Returns the raw stored object from Redux (in contrast to simpleRootSelector)
 */
export declare const simpleRootRawSelector: <IState extends Map<string, any>, ISubState>(domain: string, state: IState) => any;
/**
 * simpleRootSelector is a Redux selector of a subState based on a domain string
 * @param domain
 * @param state
 *
 * Asssumes that the substate is an ImmutableJS object and has a toJS function on the object
 */
export declare const simpleRootSelector: <IState extends {
    [key: string]: any;
}, ISubState extends {
    toJS: () => IRootState;
}>(domain: string, state: IState) => any;
/** DEPRECATED */
export declare const enum simpleType {
    array = 0,
    boolean = 1,
    number = 2,
    object = 3,
    string = 4,
    tags = 5
}
/** DEPRECATED */
export declare const simpleSelect: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, tagFilter: string, tagKeysFilter?: string, returnType?: any, subStateSelector?: any) => any;
/**
 * Cached Redux Selector using Lodash Get API to select parts of the state
 * https://lodash.com/docs#get
 */
export declare const simpleSelectorGet: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, path: string | string[], defaultValue?: any) => any;
export declare const createSimpleSelectorGet: <ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subStateSelector: (state: any) => ISubState, defaultValue?: any) => ParametricSelector<ISubState, string | string[], any | ISubPayload | ISubPayload[]>;
/**
 * Cached Redux Selector using Lodash Pick API to select parts of the state
 * https://lodash.com/docs#pick
 */
export declare const simpleSelectorPick: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, paths: string | string[]) => any;
export declare const createSimpleSelectorPick: <ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subStateSelector: (state: any) => ISubState) => ParametricSelector<ISubState, string | String[], any | ISubPayload | ISubPayload[]>;
/**
 * Cached Redux Selector using Lodash Pick API that flattens resulting object and renames keys
 * https://lodash.com/docs#pick
 */
export declare const simpleSelectorPickTransform: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, paths: string | string[], keyLookup: {
    [key: string]: string;
}, keyPathLookup: string | {
    [key: string]: string;
}) => any;
export declare const createSimpleSelectorPickTransform: <ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subStateSelector: (state: any) => ISubState, keyLookup: {
    [key: string]: string;
}, keyPathLookup: {
    [key: string]: string;
} | string) => ParametricSelector<ISubState, string | String[], any | ISubPayload | ISubPayload[]>;
"
`;
